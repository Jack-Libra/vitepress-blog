import{_ as t,c as e,o as n,ae as r}from"./chunks/framework.D-Im-B_H.js";const b=JSON.parse('{"title":"如何用 n8n + crawl4ai 打造自動化電商分析平台（含完整架構與實作心得）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/第一篇文章.md","filePath":"posts/第一篇文章.md"}'),l={name:"posts/第一篇文章.md"};function s(i,a,o,h,d,c){return n(),e("div",null,a[0]||(a[0]=[r(`<h1 id="如何用-n8n-crawl4ai-打造自動化電商分析平台-含完整架構與實作心得" tabindex="-1">如何用 n8n + crawl4ai 打造自動化電商分析平台（含完整架構與實作心得） <a class="header-anchor" href="#如何用-n8n-crawl4ai-打造自動化電商分析平台-含完整架構與實作心得" aria-label="Permalink to &quot;如何用 n8n + crawl4ai 打造自動化電商分析平台（含完整架構與實作心得）&quot;">​</a></h1><p>📌 TL;DR：這篇文章將帶你從零開始，用 crawl4ai + n8n 打造一個能每日更新的電商資料平台。從爬蟲、API 設計、資料庫，到前端可視化儀表板，完整展示我如何實作資料驅動的應用。</p><h2 id="💡為什麼想做這個專案" tabindex="-1">💡為什麼想做這個專案？ <a class="header-anchor" href="#💡為什麼想做這個專案" aria-label="Permalink to &quot;💡為什麼想做這個專案？&quot;">​</a></h2><p>這個專案起源於對<strong>資料分析</strong>與<strong>自動化流程</strong>的雙重興趣。<br> 在學期間，我修習過資料探勘與商業分析課程，對從資料中挖掘洞察的過程感到非常著迷。<br> 另一方面，我接觸 n8n 已有一段時間，了解它在自動化場景中的應用潛力，而「爬蟲」正是其中最實用也最具挑戰性的任務之一。</p><p>因此，我決定結合 <strong>n8n + crawl4ai</strong>，以<strong>電商商品資料</strong>為主題，打造一個能自動更新、視覺化分析的資料平台，讓消費者與店家都能掌握最新市場動態，真正實踐資料驅動的應用。</p><h2 id="📍專案預期功能" tabindex="-1">📍專案預期功能 <a class="header-anchor" href="#📍專案預期功能" aria-label="Permalink to &quot;📍專案預期功能&quot;">​</a></h2><p>n8n每天將自動從蝦皮、momo、PChome 等平台爬取熱門商品資訊，資料通過清洗CRUD、轉換後，於前端網頁呈現：</p><p>📈 熱門商品排行榜（每日變化）</p><p>💸 價格變動與趨勢圖</p><p>🔍 熱門關鍵字分析</p><p>📊 類別分佈統計</p><p>能同時比對多個電商平台，無論是競品觀察、商品選品、內容研究，甚至可作為市場研究的工具。</p><h2 id="⚙️使用技術-工具-框架" tabindex="-1">⚙️使用技術&amp;工具&amp;框架 <a class="header-anchor" href="#⚙️使用技術-工具-框架" aria-label="Permalink to &quot;⚙️使用技術&amp;工具&amp;框架&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">技術模組</th><th>說明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>爬蟲</strong></td><td>使用 <a href="https://github.com/LittleWat/crawl4ai" target="_blank" rel="noreferrer">crawl4ai</a> ，穩定抓取各大電商網站</td></tr><tr><td style="text-align:center;"><strong>自動化</strong></td><td>利用 <a href="https://n8n.io/" target="_blank" rel="noreferrer">n8n</a> 定時觸發爬蟲、清洗資料並入庫</td></tr><tr><td style="text-align:center;"><strong>後端 API</strong></td><td>使用 FastAPI + SQLAlchemy 提供 RESTful API，儲存於 Supabase</td></tr><tr><td style="text-align:center;"><strong>前端呈現</strong></td><td>以 Next.js + Tailwind 打造圖表化儀表板，支援響應式</td></tr><tr><td style="text-align:center;"><strong>資料視覺化</strong></td><td>使用 Recharts 呈現趨勢、分佈與分析圖表</td></tr><tr><td style="text-align:center;"><strong>開發環境</strong></td><td>建議於Ubuntu上安裝Docker(本地WSL2太吃硬體資源)，拉取n8n、crawl4ai映像檔並建立容器。</td></tr><tr><td style="text-align:center;"><strong>線上部署</strong></td><td>前端選擇Vercel，後端選擇Render。</td></tr></tbody></table><h2 id="架構圖總覽" tabindex="-1">架構圖總覽 <a class="header-anchor" href="#架構圖總覽" aria-label="Permalink to &quot;架構圖總覽&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+-------------------+        +-------------------+        +-------------------+</span></span>
<span class="line"><span>|   前端 (Next.js)  | &lt;----&gt; |   後端 (FastAPI)  | &lt;----&gt; |   資料庫 (Supabase)|</span></span>
<span class="line"><span>|   (Vercel)        |        |   (Render/本地)   |        |   (PostgreSQL)    |</span></span>
<span class="line"><span>+-------------------+        +-------------------+        +-------------------+</span></span>
<span class="line"><span>         |                           ^</span></span>
<span class="line"><span>         |                           |</span></span>
<span class="line"><span>         v                           |</span></span>
<span class="line"><span>+-------------------+                |</span></span>
<span class="line"><span>| 自動化流程 (N8N)   |----------------+</span></span>
<span class="line"><span>| (Docker/雲端)      |</span></span>
<span class="line"><span>+-------------------+</span></span></code></pre></div><h2 id="n8n實作流程圖" tabindex="-1">N8N實作流程圖 <a class="header-anchor" href="#n8n實作流程圖" aria-label="Permalink to &quot;N8N實作流程圖&quot;">​</a></h2><p><img src="https://hackmd.io/_uploads/HyW1CDvIle.png" alt="螢幕擷取畫面 2025-07-18 144508"></p><h2 id="成果畫面與-github-連結" tabindex="-1">成果畫面與 GitHub 連結 <a class="header-anchor" href="#成果畫面與-github-連結" aria-label="Permalink to &quot;成果畫面與 GitHub 連結&quot;">​</a></h2><h3 id="github" tabindex="-1"><a href="https://github.com/Jack-Libra/Ecommerce-trend-analyzer" target="_blank" rel="noreferrer">GitHub</a> <a class="header-anchor" href="#github" aria-label="Permalink to &quot;[GitHub](https://github.com/Jack-Libra/Ecommerce-trend-analyzer)&quot;">​</a></h3><h2 id="未來添加功能" tabindex="-1">未來添加功能 <a class="header-anchor" href="#未來添加功能" aria-label="Permalink to &quot;未來添加功能&quot;">​</a></h2><ul><li>📌 加入商品追蹤清單與價格通知功能</li><li>📌 整合 LLM，自動為商品生成摘要或分群</li><li>📌 導出報表、生成競品比較分析</li><li>📌 API 對外開放，提供他人串接</li></ul><h2 id="挑戰與心得" tabindex="-1">挑戰與心得 <a class="header-anchor" href="#挑戰與心得" aria-label="Permalink to &quot;挑戰與心得&quot;">​</a></h2><ul><li><h5 id="爬蟲穩定性" tabindex="-1">爬蟲穩定性: <a class="header-anchor" href="#爬蟲穩定性" aria-label="Permalink to &quot;爬蟲穩定性:&quot;">​</a></h5> 原本想用 LLM 自動解析頁面，但效率與成本都不理想，後來選擇用 crawl4ai 的 CSS selector，結果反而更穩定且維護成本低。</li><li><h5 id="n8n-排程與-json-處理" tabindex="-1">n8n 排程與 JSON 處理: <a class="header-anchor" href="#n8n-排程與-json-處理" aria-label="Permalink to &quot;n8n 排程與 JSON 處理:&quot;">​</a></h5> 在資料清洗與格式轉換階段，踩過幾次變數名稱與結構錯誤的坑。</li><li><h5 id="跨服務環境變數管理" tabindex="-1">跨服務環境變數管理: <a class="header-anchor" href="#跨服務環境變數管理" aria-label="Permalink to &quot;跨服務環境變數管理:&quot;">​</a></h5> 整合前後端與資料庫時，環境變數配置與 CORS 設定需非常謹慎。</li><li><h5 id="版本問題" tabindex="-1">版本問題: <a class="header-anchor" href="#版本問題" aria-label="Permalink to &quot;版本問題:&quot;">​</a></h5> Tailwind、nextjs版本太新未注意部分功能和編碼方式改變。</li><li><h5 id="分離-整合式部署" tabindex="-1">分離&amp;整合式部署: <a class="header-anchor" href="#分離-整合式部署" aria-label="Permalink to &quot;分離&amp;整合式部署:&quot;">​</a></h5> 發現若採分離式部署(即前端Vercel、後端Render)，前端網頁會渲染太慢，後來新增了Nextjs獨有的API設計，另建API於前端文件，實現整合式部屬。</li><li><h5 id="資料型別問題" tabindex="-1">資料型別問題: <a class="header-anchor" href="#資料型別問題" aria-label="Permalink to &quot;資料型別問題:&quot;">​</a></h5> 分離式與整合式二者接受的資料型別要完全一致，才能進行後續的資料轉換。</li></ul><h2 id="結語" tabindex="-1">結語 <a class="header-anchor" href="#結語" aria-label="Permalink to &quot;結語&quot;">​</a></h2><p>透過這次專案實作，我不僅加深了對前後端整合與資料流程設計的理解，也提升了解決跨框架整合問題的能力。未來我會繼續分享更深入的細節，像是：</p><ul><li>crawl4ai 該如何應用於 n8n，其中有哪些細節需要注意?</li><li>如何用 n8n 自動清洗資料與串接 API？</li></ul><p>📢 想看更多 n8n 或電商爬蟲實戰？<br> 📎 歡迎追蹤我的 Medium / GitHub 👉 <a href="https://github.com/Jack-Libra" target="_blank" rel="noreferrer">@Jack-Libra</a><br> 💬 如果你對這個專案有任何建議或想法，歡迎留言交流！</p><h2 id="下一篇-深入介紹-n8n-自動化流程設計" tabindex="-1">下一篇:深入介紹 n8n 自動化流程設計 <a class="header-anchor" href="#下一篇-深入介紹-n8n-自動化流程設計" aria-label="Permalink to &quot;下一篇:深入介紹 n8n 自動化流程設計&quot;">​</a></h2><p><a href="/vitepress-blog/">回首頁</a></p>`,30)]))}const u=t(l,[["render",s]]);export{b as __pageData,u as default};
